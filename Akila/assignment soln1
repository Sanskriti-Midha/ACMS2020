// A recursive program to add two linked lists 

#include <stdio.h> 
#include <stdlib.h> 

// A linked List Node 
struct node 
{ 
	int data; 
	struct node* next; 
}; 

/* function to insert a node at the beginning of list */
void push(struct node** head, int value) 
{ 
	struct node* new = (struct node*) malloc(sizeof(struct node)); 
	new->data = value; 
    new->next = (*head); 
    (*head) = new; 
} 

//function to print linked list 
void print(struct node *node) 
{ 
	while (node->next != NULL) 
	{ 
		printf("%d->",node->data); 
		node = node->next; 
	} 
	printf("%d",node->data); 
} 

//function to swap two pointers 
void swap(struct node** a,struct  node** b ) 
{ 
	struct node* t = *a; 
	*a = *b; 
	*b = t; 
} 

//function to get size of linked list 
int getSize(struct node *node) 
{ 
	int size = 0; 
	while (node != NULL) 
	{ 
		node = node->next; 
		size++; 
	} 
	return size; 
} 

// Adds two linked lists of same size 
                       // head of the resultant linked list. Carry is propagated while returning from 
                       // the recursion 
struct node* addSameSize(struct node* head1,struct node* head2, int* carry) 
{ 
// Since the function assumes linked lists are of same size,check any of the two head pointers is enough
	if (head1 == NULL) 
		return NULL; 
	int sum; 
	struct node* result = (struct node *)malloc(sizeof(struct node)); 

	// Recursively add remaining nodes and get the carry 
	result->next = addSameSize(head1->next, head2->next, carry); 

	// add digits of current nodes and propagated carry 
	sum = head1->data + head2->data + *carry; 
	*carry = sum / 10; 
	sum = sum % 10; 

	// Assign the sum to current node of resultant list 
	result->data = sum; 

	return result; 
} 

// This function is called after the smaller list is added to the bigger 
// lists's sublist of same size. Once the right sublist is added, the carry 
// must be added toe left side of larger list to get the final result. 
void addCarryToRemaining(struct node* head,struct node* c, int* carry,struct node** result) 
{ 
	int sum; 

	// If diff. number of nodes are not traversed, add carry 
	if (head!=c) 
	{ 
		addCarryToRemaining(head->next, c, carry, result); 

		sum = head->data + *carry; 
		*carry = sum/10; 
		sum %= 10; 

		// add this node to the front of the result 
		push(result, sum); 
	} 
} 

// The main function that adds two linked lists 
// The sum of two lists is stored in a list referred by result 
void addList(struct node* head1,struct  node* head2,struct  node** result) 
{ 
	struct node *cur; 

	// first list is empty 
	if (head1 == NULL) 
	{ 
		*result = head2; 
		return; 
	} 

	// second list is empty 
	else if (head2 == NULL) 
	{ 
		*result = head1; 
		return; 
	} 

	int size1 = getSize(head1); 
	int size2 = getSize(head2) ; 

	int carry = 0; 

	// Add same size lists 
	if (size1 == size2) 
		*result = addSameSize(head1, head2, &carry); 

	else
	{ 
		int diff = abs(size1 - size2); 

		// First list should always be larger than second list. 
		// If not, swap pointers 
		if (size1 < size2) 
			swap(&head1, &head2); 

		// move diff. number of nodes in first list 
		for (cur = head1; diff--; cur = cur->next); 

		// get addition of same size lists 
		*result = addSameSize(cur, head2, &carry); 

		// get addition of remaining first list and carry 
		addCarryToRemaining(head1, cur, &carry, result); 
	} 

	// if some carry is still there, add a new node to the fron of 
	// the result list. e.g. 999 and 87 
	if (carry) 
		push(result, carry); 
} 

// Driver program to test above functions 
int main() 
{ 
	struct node *l1 = NULL;
	struct node*l2 = NULL;
	struct node*result = NULL; 

	int arr1[50],arr2[50],i=0,j=0; 
	char n;
    printf("Enter two numbers\n");
    scanf("%1c",&n);
    while(n!=' ')
    {
        arr1[i++]=n-48;;
        scanf("%1c",&n);
    }scanf("%c",&n);
    while(n!=' ')
    {
        if(n=='\n')
        break;
        arr2[j++]=n-48;;
        scanf("%1c",&n);
    }
	int size1 = i;
	int size2 = j; 

	// Create first list
	for (i = size1-1; i >= 0; --i) 
		push(&l1, arr1[i]); 

	// Create second list
	for (i = size2-1; i >= 0; --i) 
		push(&l2, arr2[i]); 
	addList(l1, l2, &result); 
	print(result); 
	return 0; 
} 
